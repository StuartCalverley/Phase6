import java.util.Map;

public class Validator {
	// Static variable for pass case
	private final String pass = "Pass";
	// Static variable for pass case
	private final String fail = "Fail";
	// Static variable for pass case
	private final String fatal = "Fatal";

	/**
	 * The purpose is to check is the final balance fits the constraints
	 * @param balance The total amount of money in available
	 * @param command The command that the check came from
	 * @param accNum The account number for the account
	 * @return
	 */
	public boolean balanceCheck (float balance,String command, int accNum) {
		if (balance < 0) {
			System.out.println("ERROR: "+ command +" caused negative balance on account " + accNum);
		} else if (balance > (float)99999.99f) {
			System.out.println("ERROR: "+ command +" caused balance over 99999.99 on account " + accNum);
		} else {
			return true;
		}
		return false;
	}
	/**
	 * Validates any form of withdrawal
	 * @param balance the amount of money of the account
	 * @param type The type of account student or non student
	 * @param transactionAmount The amount of money being processed in a transaction
	 * @param accNum The account number number of the user
	 * @param command The command it came from
	 * @return a string either pass, fail, or fatal to show results of validation
	 */
	public String withdrawal(float balance, char type, float transactionAmount, int accNum, String command) {
		float fee = 0;
		//Determine the transfer fee
		if (type == 'S'){
			fee = (float) 0.05;
		} else if (type == 'N') {
			fee = (float) 0.10;
		} else {
			System.out.println("ERROR: Invalid account type in file");
			return fatal;
		}
		//Determine what amount to transfer
		balance = balance + -(transactionAmount + fee);
		//Performs the final balance check
		if(!(balanceCheck(balance,command,accNum))) {
			return fail;	
		}
		return pass;
	}
	
	/**
	 * Validates any form of deposit
	 * @param balance the amount of money of the account
	 * @param type The type of account student or non student
	 * @param transactionAmount The amount of money being processed in a transaction
	 * @param accNum The account number number of the user
	 * @param command The command it came from
	 * @return a string either pass, fail, or fatal to show results of validation
	 */
	public String deposit (float balance,char type, float transactionAmount, int accNum , String command) {
		float fee = 0;
		 //Determine the transfer fee
		if (type == 'S'){
			fee = (float) 0.05;
		} else if (type == 'N') {
			fee = (float) 0.10;
		} else {
			fee = (float) 0.00;
		}
		//Determine what amount to transfer
		balance = balance + (transactionAmount + fee);
		//Perform the final balance check
		if(!(balanceCheck(balance,command,accNum))) {
			return fail;	
		}
		return pass;
	}
	
	/**
	 * Validates any form of paybill
	 * @param balance the amount of money of the account
	 * @param type The type of account student or non student
	 * @param transactionAmount The amount of money being processed in a transaction
	 * @param accNum The account number number of the user
	 * @param mm The company the bill is being payed to.
	 * @return a string either pass, fail, or fatal to show results of validation
	 */
	public String paybill (float balance,char type, float transactionAmount, int accNum, String mm) {
		if(mm.equals("EC")  || mm.equals("TV")   || mm.equals("CQ")){
			System.out.println("ERROR: Paybill company " + mm + " does not exist.");
			return fatal;
		} 
		if (!(withdrawal(balance,type, transactionAmount, accNum, "Paybill").equals("Pass"))) {
			return fail;
		}
		return pass;
	}

	/**
	 * Validate the create function
	 * @param accounts list of all accounts
	 * @param accNum the new account number
	 * @param amount the  amount
	 * @return a string either pass, fail, or fatal to show results of validation
	 */
	public String create (Map<Integer, BankAccount> accounts, int accNum, float amount){
		if (accNumExist (accounts, accNum)) {
			System.out.println("ERROR: Create the account number " + accNum +" is already in use");
			return fail;
		}
		if(!(balanceCheck(amount,"Create",accNum))) {
			return fail;	
		}
		return pass;
	}

	/**
	 * Checks if the account exists already.
	 * @param accounts list of all accounts
	 * @param accName The name of the account
	 * @return true if name is found false if name is not found
	 */
	public boolean nameExist (Map<Integer, BankAccount> accounts, String accName){
		String name;
		for(int key: accounts.keySet()) {
			name = accounts.get(key).getName();
			if(name.equals(accName)){
				return true;
			}	
		}
		return false;
	}

	/**
	 * Check if the account number exists
	 * @param accounts list of all accounts
	 * @param accNum The account number
	 * @return true if name is found false if name is not found
	 */
	public boolean accNumExist (Map<Integer, BankAccount> accounts, int accNum) {
		for(int key: accounts.keySet()) {
			if(key == (accNum)){
				return true;
			}	
		}
		return false;
	}
	/**
	 * Check if the account number and account name are matching
	 * @param accounts list of all accounts
	 * @param accNum The account number
	 * @param accName The account name
	 * @return true if name is owned by account is found false if name is not found
	 */
	public boolean matchNumName (Map<Integer, BankAccount> accounts, int accNum, String accName) {
		for(int key: accounts.keySet()) {
			if(key == (accNum)){
				if(accounts.get(accNum).getName().equals(accName)) {
					return true;
				}
			}	
		}
		return false;	
	}
	/**
	 * Check if the account number and account name are matching
	 * @param accounts list of all accounts
	 * @param accNum The account number
	 * @param accName The account name
	 * @param command the command the method was called from
	 * @return true if name is owned by account is found false if name is not found
	 */
	public String verifyUser(Map<Integer, BankAccount> accounts, int accNum, String accName, String command) {
		if(!(nameExist(accounts, accName))) {
			System.out.println("ERROR: The account name " + accName + " is not found from command " + command);
			return fail;
		}
		if(!(nameExist(accounts, accName))) {
			System.out.println("ERROR: The account num " + accNum + " is not found from command " + command);
			return fail;
		}
		if(!(matchNumName(accounts, accNum, accName))){
			System.out.println("ERROR: The account num " + accNum + " and name "+ accName +" does not match");
			return fatal;
		}
		return pass;
	}	
}